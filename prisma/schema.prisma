generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  watchList     WatchList?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subscription {
  id                  Int               @id @default(autoincrement())
  userId              String
  cost                String?
  streamingProviderId Int
  streamingProvider   StreamingProvider @relation(fields: [streamingProviderId], references: [id])
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model StreamingProvider {
  id           Int            @id @default(autoincrement())
  name         String
  logoUrl      String
  providerId   Int            @unique
  Subscription Subscription[]

  @@map("streaming_provider")
}

model WatchListItem {
  id               Int                @id @default(autoincrement())
  mediaId          Int                @unique
  mediaType        String
  originalTitle    String?
  posterPath       String
  overview         String
  originalName     String?
  WatchListOnItems WatchListOnItems[]

  @@map("watch_list_items")
}

model WatchList {
  id               Int                @id @default(autoincrement())
  userId           String             @unique
  watchListOnItems WatchListOnItems[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("watch_lists")
}

model WatchListOnItems {
  watchListId     Int
  watchListItemId Int
  watchList       WatchList     @relation(fields: [watchListId], references: [id], onDelete: Cascade)
  watchListItem   WatchListItem @relation(fields: [watchListItemId], references: [id], onDelete: Cascade)

  @@id([watchListId, watchListItemId])
  @@map("watch_list_on_items")
}
